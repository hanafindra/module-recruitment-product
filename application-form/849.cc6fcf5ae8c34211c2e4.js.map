{"version":3,"file":"849.cc6fcf5ae8c34211c2e4.js","mappings":"uHAAO,SAASA,EAAkBC,GAChC,MAAO,CAACC,EAAU,CAAC,KAEjB,MAAMC,EAAQD,EAAQC,MAAQC,OAAOF,EAAQC,OAASF,EAAKI,aAE3D,OADeJ,EAAKK,QAAQH,IAAUF,EAAKK,QAAQL,EAAKI,aAC3C,CAEjB,C,iCCkCO,SAASE,EAAgBN,GAC9B,MAAO,CAACO,EAAON,KAGb,IAAIO,EACJ,GAAgB,gBAHAP,GAASQ,QAAUN,OAAOF,EAAQQ,SAAW,eAG7BT,EAAKU,iBAAkB,CACrD,MAAMN,EAAeJ,EAAKW,wBAA0BX,EAAKI,aACnDF,EAAQD,GAASC,MAAQC,OAAOF,EAAQC,OAASE,EAEvDI,EACER,EAAKU,iBAAiBR,IAAUF,EAAKU,iBAAiBN,EAC1D,KAAO,CACL,MAAMA,EAAeJ,EAAKI,aACpBF,EAAQD,GAASC,MAAQC,OAAOF,EAAQC,OAASF,EAAKI,aAE5DI,EAAcR,EAAKY,OAAOV,IAAUF,EAAKY,OAAOR,EAClD,CAIA,OAAOI,EAHOR,EAAKa,iBAAmBb,EAAKa,iBAAiBN,GAASA,EAG5C,CAE7B,C,iCC/DO,SAASO,EAAad,GAC3B,MAAO,CAACe,EAAQd,EAAU,CAAC,KACzB,MAAMC,EAAQD,EAAQC,MAEhBc,EACHd,GAASF,EAAKiB,cAAcf,IAC7BF,EAAKiB,cAAcjB,EAAKkB,mBACpBC,EAAcJ,EAAOK,MAAMJ,GAEjC,IAAKG,EACH,OAAO,KAET,MAAME,EAAgBF,EAAY,GAE5BG,EACHpB,GAASF,EAAKsB,cAAcpB,IAC7BF,EAAKsB,cAActB,EAAKuB,mBAEpBC,EAAMC,MAAMC,QAAQJ,GA+B9B,SAAmBK,EAAOC,GACxB,IAAK,IAAIJ,EAAM,EAAGA,EAAMG,EAAME,OAAQL,IACpC,GAAcG,EAAMH,GAhC8BM,KAAKT,GAiCrD,OAAOG,CAIb,CArCQO,CAAUT,GAkBlB,SAAiBU,EAAQJ,GACvB,IAAK,MAAMJ,KAAOQ,EAChB,GACEC,OAAOC,UAAUC,eAAeC,KAAKJ,EAAQR,IACnCQ,EAAOR,GApB6BM,KAAKT,GAsBnD,OAAOG,CAIb,CA1BQa,CAAQf,GAEZ,IAAIf,EAUJ,OARAA,EAAQP,EAAKsC,cAAgBtC,EAAKsC,cAAcd,GAAOA,EACvDjB,EAAQN,EAAQqC,cAEZrC,EAAQqC,cAAc/B,GACtBA,EAIG,CAAEA,QAAOgC,KAFHxB,EAAOyB,MAAMnB,EAAcQ,QAElB,CAE1B,C,iCCnCO,SAASY,EAAoBzC,GAClC,MAAO,CAACe,EAAQd,EAAU,CAAC,KACzB,MAAMkB,EAAcJ,EAAOK,MAAMpB,EAAKgB,cACtC,IAAKG,EAAa,OAAO,KACzB,MAAME,EAAgBF,EAAY,GAE5BuB,EAAc3B,EAAOK,MAAMpB,EAAK2C,cACtC,IAAKD,EAAa,OAAO,KACzB,IAAInC,EAAQP,EAAKsC,cACbtC,EAAKsC,cAAcI,EAAY,IAC/BA,EAAY,GAOhB,OAJAnC,EAAQN,EAAQqC,cAAgBrC,EAAQqC,cAAc/B,GAASA,EAIxD,CAAEA,QAAOgC,KAFHxB,EAAOyB,MAAMnB,EAAcQ,QAElB,CAE1B,C","sources":["webpack://application_form/../../../node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs","webpack://application_form/../../../node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs","webpack://application_form/../../../node_modules/date-fns/locale/_lib/buildMatchFn.mjs","webpack://application_form/../../../node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs"],"sourcesContent":["export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","/* eslint-disable no-unused-vars */\n\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n"],"names":["buildFormatLongFn","args","options","width","String","defaultWidth","formats","buildLocalizeFn","value","valuesArray","context","formattingValues","defaultFormattingWidth","values","argumentCallback","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","array","predicate","length","test","findIndex","object","Object","prototype","hasOwnProperty","call","findKey","valueCallback","rest","slice","buildMatchPatternFn","parseResult","parsePattern"],"sourceRoot":""}